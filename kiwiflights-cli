#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# ####################################################################
# Copyright (C) 2016  Fridolin Pokorny, fridex.devel@gmail.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# ####################################################################

import logging
import sys
from argparse import ArgumentParser
from kiwiflights import __version__ as kiwiflights_version, System
from kiwiflights.utils import dict2json

_logger = logging.getLogger(__name__)


def main():
    parser = ArgumentParser('kiwiflights-cli',
                            description='Kiwi week homework, version: %s' % kiwiflights_version)
    parser.add_argument('-input', dest='input', action='store', metavar='INPUT.csv',
                        help='path to CSV file to be used, if omitted stdin is used')
    parser.add_argument('-output', dest='output', action='store', metavar='OUTPUT.json',
                        help='path to output file, if omitted stdout is used')
    parser.add_argument('-no-pretty', dest='no_pretty', action='store_true',
                        help='output will not be printed with indentation')
    parser.add_argument('-verbose', dest='verbose', action='store_true',
                        help='print debug messages during run')

    args = parser.parse_args()

    if args.verbose:
        # Set level for root logger
        logging.basicConfig(level=logging.DEBUG)
        _logger.warning("Running application in verbose mode: %s" % sys.argv)

    if args.input:
        _logger.debug("Using file '%s' as a source" % args.input)
        with open(args.input, 'r') as f:
            system = System.from_csv_file(f)
    else:
        system = System.from_csv_file(sys.stdin)

    itineraries = system.compute_itineraries()

    output_file = sys.stdout
    if args.output:
        _logger.debug("Opening output file '%s' for writing" % args.output)
        output_file = open(args.output, 'w')

    try:
        result = dict2json({'itineraries': [i.to_dict() for i in itineraries]}, pretty=not args.no_pretty)
        _logger.debug("Printing result to '%s', found %d itineraries" % (output_file, len(itineraries)))
        print(result, file=output_file)
    finally:
        # clean up opened files on any error
        if args.output:
            _logger.debug("Closing output file '%s'" % output_file)
            output_file.close()


if __name__ == "__main__":
    main()
